Index: UI/ChatWnd.cpp
===================================================================
--- UI/ChatWnd.cpp	(revision 4576)
+++ UI/ChatWnd.cpp	(working copy)
@@ -8,9 +8,14 @@
 #include "../network/Message.h"
 #include "../universe/Universe.h"
 #include "../universe/System.h"
+#include "../universe/Special.h"
+#include "../universe/Species.h"
+#include "../universe/Tech.h"
+#include "../universe/Building.h"
 #include "../util/OptionsDB.h"
 #include "../util/MultiplayerCommon.h"
 
+#include <boost/algorithm/string.hpp>
 #include <GG/GUI.h>
 
 
@@ -38,14 +43,26 @@
     mutable boost::signal<void ()>  LosingFocusSignal;
 
 private:
+    void            FindGameWords();                    //!< Finds all game words for autocomplete
     void            AutoComplete();                     //!< Autocomplete current word
+    bool            CompleteWord(const std::set<std::string>& names, const std::string& partial_word,         //!< AutoComplete helper function
+                                const std::pair<GG::CPSize, const GG::CPSize>& cursor_pos, std::string& text);
+
+    // Set for autocomplete game words
+    std::set<std::string> m_gameWords;
+
+    // Repeated tabs variables
+     std::vector<std::string> autoCompleteChoices;
+     unsigned int m_repeatedTabCount;
+     std::string m_lastLineRead;
+     std::string m_lastGameWord;
 };
 
 ////////////////////
 // MessageWndEdit //
 ////////////////////
 MessageWndEdit::MessageWndEdit(GG::X x, GG::Y y, GG::X w) :
-    CUIEdit(x, y, w, "")
+    CUIEdit(x, y, w, ""), m_lastGameWord(""), m_lastLineRead(""), m_repeatedTabCount(0)
 {}
 
 void MessageWndEdit::GainingFocus()
@@ -63,7 +80,7 @@
 void MessageWndEdit::KeyPress(GG::Key key, boost::uint32_t key_code_point, GG::Flags<GG::ModKey> mod_keys)
 {
     switch (key) {
-    case GG::GGK_TAB:
+    case GG::GGK_TAB: 
         AutoComplete();
         break;
     case GG::GGK_RETURN:
@@ -82,71 +99,173 @@
     Edit::KeyPress(key, key_code_point, mod_keys);
 }
 
+ void MessageWndEdit::FindGameWords()
+ {
+     // add player and empire names
+    for (EmpireManager::const_iterator it = Empires().begin(); it != Empires().end(); ++it){
+        m_gameWords.insert(it->second->Name());
+        m_gameWords.insert(it->second->PlayerName());
+    }
+    // add system names
+    std::vector<System*> systems = GetUniverse().Objects().FindObjects<System>();
+    for (unsigned int i = 0; i < systems.size(); ++i) {
+        if (systems[i]->Name() != "")
+            m_gameWords.insert(systems[i]->Name());
+    }
+     // add ship names
+    std::vector<Ship*> ships = GetUniverse().Objects().FindObjects<Ship>();
+    for (unsigned int i = 0; i < ships.size(); ++i) {
+        if (ships[i]->Name() != "")
+            m_gameWords.insert(ships[i]->Name());
+    }
+     // add ship design names
+    for (PredefinedShipDesignManager::iterator it = GetPredefinedShipDesignManager().begin(); it != GetPredefinedShipDesignManager().end(); ++it){
+        if (it->second->Name() != "")
+            m_gameWords.insert(UserString(it->second->Name()));
+    }
+     // add specials names
+    std::vector<std::string> specials =  SpecialNames();
+    for (unsigned int i = 0; i < specials.size(); ++i) {
+        if (specials[i] != "")
+            m_gameWords.insert(UserString(specials[i]));
+    }
+     // add species names
+    for (SpeciesManager::iterator it = GetSpeciesManager().begin(); it != GetSpeciesManager().end(); ++it){
+        if (it->second->Name() != "")
+            m_gameWords.insert(UserString(it->second->Name()));
+    }
+     // add techs names
+    std::vector<std::string> techs = GetTechManager().TechNames();
+    for (unsigned int i = 0; i < techs.size(); ++i) {
+        if (techs[i] != "")
+            m_gameWords.insert(UserString(techs[i]));
+    }
+    // add building type names
+    for (BuildingTypeManager::iterator it = GetBuildingTypeManager().begin(); it != GetBuildingTypeManager().end(); ++it){
+        if (it->second->Name() != "")
+            m_gameWords.insert(UserString(it->second->Name()));
+    }
+    // add ship hulls
+    for (PredefinedShipDesignManager::iterator it = GetPredefinedShipDesignManager().begin(); it != GetPredefinedShipDesignManager().end(); ++it){
+        if (it->second->Hull() != "")
+            m_gameWords.insert(UserString(it->second->Hull()));
+    }
+    // add ship parts
+    for (PredefinedShipDesignManager::iterator it = GetPredefinedShipDesignManager().begin(); it != GetPredefinedShipDesignManager().end(); ++it){
+        const std::vector<std::string>& parts = it->second->Parts();
+        for (std::vector<std::string>::const_iterator it1 = parts.begin(); it1 != parts.end(); ++it1)
+        {
+            if (*it1 != "")
+                m_gameWords.insert(UserString(*it1));
+        }
+    }
+ }
+
 void MessageWndEdit::AutoComplete()
 {
-    std::string text = this->Text();
-    std::pair<GG::CPSize, GG::CPSize> cursor_pos = this->CursorPosn();
-    if (cursor_pos.first == cursor_pos.second && 0 < cursor_pos.first && cursor_pos.first <= text.size()) {
-        std::string::size_type word_start = text.substr(0, Value(cursor_pos.first)).find_last_of(" :");
-        if (word_start == std::string::npos)
-            word_start = 0;
-        else
-            ++word_start;
-        std::string partial_word = text.substr(word_start, Value(cursor_pos.first - word_start));
-        if (partial_word == "")
-            return;
-        std::set<std::string> names;
-        // add player and empire names
-        for (EmpireManager::const_iterator it = Empires().begin(); it != Empires().end(); ++it) {
-            names.insert(it->second->Name());
-            names.insert(it->second->PlayerName());
+    std::string fullLine = this->Text();
+
+    // Check for repeated tab
+    // if current line is same as the last read line
+    if (m_lastLineRead != "" && boost::equals(fullLine, m_lastLineRead)){
+        if (m_repeatedTabCount >= autoCompleteChoices.size())
+            m_repeatedTabCount = 0;
+
+        std::string nextWord = autoCompleteChoices.at(m_repeatedTabCount);
+
+        if (nextWord != ""){
+             // Remove the old choice from the line
+            // and replace it with the next choice
+            fullLine = fullLine.substr(0, fullLine.size() - (m_lastGameWord.size() + 1));
+            fullLine.insert(fullLine.size(), nextWord + " ");
+            this->SetText(fullLine);
+            GG::CPSize move_cursor_to = fullLine.size() + GG::CP1;
+            this->SelectRange(move_cursor_to, move_cursor_to);
+            m_lastGameWord = nextWord;
+            m_lastLineRead = this->Text();
         }
-        // add system names
-        std::vector<System*> systems = GetUniverse().Objects().FindObjects<System>();
-        for (unsigned int i = 0; i < systems.size(); ++i) {
-            if (systems[i]->Name() != "")
-                names.insert(systems[i]->Name());
-        }
+        ++m_repeatedTabCount;
+    }
+    else {                  
+        bool exactMatch = false;
 
-        if (names.find(partial_word) != names.end()) { // if there's an exact match, just add a space
-            text.insert(Value(cursor_pos.first), " ");
-            this->SetText(text);
-            this->SelectRange(cursor_pos.first + 1, cursor_pos.first + 1);
-        } else { // no exact match; look for possible completions
-            // find the range of strings in names that is at least partially matched by partial_word
-            std::set<std::string>::iterator lower_bound = names.lower_bound(partial_word);
-            std::set<std::string>::iterator upper_bound = lower_bound;
-            while (upper_bound != names.end() && upper_bound->find(partial_word) == 0)
-                ++upper_bound;
-            if (lower_bound == upper_bound)
+        std::pair<GG::CPSize, GG::CPSize> cursor_pos = this->CursorPosn();
+        if (cursor_pos.first == cursor_pos.second && 0 < cursor_pos.first && cursor_pos.first <= fullLine.size()) {
+            std::string::size_type word_start = fullLine.substr(0, Value(cursor_pos.first)).find_last_of(" :");
+            if (word_start == std::string::npos)
+                word_start = 0;
+            else
+                ++word_start;
+            std::string partial_word = fullLine.substr(word_start, Value(cursor_pos.first - word_start));
+            if (partial_word == "")
                 return;
 
-            // find the common portion of the strings in (upper_bound, lower_bound)
-            unsigned int common_end = partial_word.size();
-            for ( ; common_end < lower_bound->size(); ++common_end) {
-                std::set<std::string>::iterator it = lower_bound;
-                char ch = (*it++)[common_end];
-                bool match = true;
-                for ( ; it != upper_bound; ++it) {
-                    if ((*it)[common_end] != ch) {
-                        match = false;
-                        break;
-                    }
+            // Find game words to try an autocomplete
+            FindGameWords();
+        
+            // See if word is an exact match with a game word
+            for (std::set<std::string>::const_iterator it = m_gameWords.begin(); it != m_gameWords.end(); ++it) {
+                if (boost::iequals(*it, partial_word)) { // if there's an exact match, just add a space
+                    fullLine.insert(Value(cursor_pos.first), " ");
+                    this->SetText(fullLine);
+                    this->SelectRange(cursor_pos.first + 1, cursor_pos.first + 1);
+                    exactMatch = true;
+                    break;
                 }
-                if (!match)
-                    break;
             }
-            unsigned int chars_to_add = common_end - partial_word.size();
-            bool full_completion = common_end == lower_bound->size();
-            text.insert(Value(cursor_pos.first), lower_bound->substr(partial_word.size(), chars_to_add) + (full_completion ? " " : ""));
-            this->SetText(text);
-            GG::CPSize move_cursor_to = cursor_pos.first + chars_to_add + (full_completion ? GG::CP1 : GG::CP0);
-            this->SelectRange(move_cursor_to, move_cursor_to);
+            // If not an exact match try to complete the word
+                if (!exactMatch) 
+                    CompleteWord(m_gameWords, partial_word, cursor_pos, fullLine);
         }
     }
 }
 
+bool MessageWndEdit::CompleteWord(const std::set<std::string>& names, const std::string& partial_word, const std::pair<GG::CPSize, const GG::CPSize>& cursor_pos, std::string& fullLine)
+{
+    // clear repeated tab variables
+    autoCompleteChoices.clear();
+    m_repeatedTabCount = 0;
 
+    bool partialWordMatch = false;
+    std::string gameWord;
+
+    // Check if the partial_word is contained in any game words
+    for (std::set<std::string>::const_iterator it = names.begin(); it != names.end(); ++it)
+    {
+        std::string tempGameWord = *it;
+
+        if (tempGameWord.size() >= partial_word.size()) {
+            std::string gameWordPartial = tempGameWord.substr(0, partial_word.size());
+
+            if (boost::iequals(gameWordPartial, partial_word))
+            {
+                if (gameWordPartial != "") {
+                    // Add all possible word choices for repeated tab
+                    autoCompleteChoices.push_back(tempGameWord);
+                    partialWordMatch = true;
+                }
+            }
+        }
+    }
+  
+    if (!partialWordMatch)
+        return false;
+
+    // Grab first autocomplete choice
+    gameWord = autoCompleteChoices.at(m_repeatedTabCount++);
+    m_lastGameWord = gameWord;
+
+    // Remove the partial_word from the line
+    // and replace it with the properly formated game word
+    fullLine = fullLine.substr(0, fullLine.size() - partial_word.size());
+    fullLine.insert(fullLine.size(), gameWord + " ");
+    this->SetText(fullLine);
+    m_lastLineRead = this->Text();
+    GG::CPSize move_cursor_to = fullLine.size() + GG::CP1;
+    this->SelectRange(move_cursor_to, move_cursor_to);
+    return true;
+}
+
 ////////////////////
 //   MessageWnd   //
 ////////////////////
