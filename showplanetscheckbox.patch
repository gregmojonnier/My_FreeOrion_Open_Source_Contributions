Index: default/eng_stringtable.txt
===================================================================
--- default/eng_stringtable.txt	(revision 4582)
+++ default/eng_stringtable.txt	(working copy)
@@ -1222,6 +1222,9 @@
 OPTIONS_QUICK_CLOSE_WNDS
 Quick-close windows
 
+OPTIONS_SHOW_SIDEPANEL_PLANETS
+Show side panel planets
+
 OPTIONS_MISC_UI
 Miscellaneous UI Settings
 
Index: UI/OptionsWnd.cpp
===================================================================
--- UI/OptionsWnd.cpp	(revision 4582)
+++ UI/OptionsWnd.cpp	(working copy)
@@ -743,6 +743,7 @@
     BoolOption("UI.fleet-autoselect",           UserString("OPTIONS_AUTOSELECT_FLEET"));
     BoolOption("UI.multiple-fleet-windows",     UserString("OPTIONS_MULTIPLE_FLEET_WNDS"));
     BoolOption("UI.window-quickclose",          UserString("OPTIONS_QUICK_CLOSE_WNDS"));
+    BoolOption("UI.sidepanel-planet-shown",     UserString("OPTIONS_SHOW_SIDEPANEL_PLANETS"));
     FileOption("stringtable-filename",          UserString("OPTIONS_LANGUAGE"),     GetRootDataDir() / "default", std::make_pair(UserString("OPTIONS_LANGUAGE_FILE"), "*" + STRINGTABLE_FILE_SUFFIX), &ValidStringtableFile);
     IntOption("UI.tooltip-delay",               UserString("OPTIONS_TOOLTIP_DELAY"));
     EndSection();
Index: UI/SidePanel.cpp
===================================================================
--- UI/SidePanel.cpp	(revision 4582)
+++ UI/SidePanel.cpp	(working copy)
@@ -458,7 +458,7 @@
 
 private:
     void                    DoLayout();
-
+    void                    CheckDisplayPlanets();
     void                    SetFocus(const std::string& focus); ///< set the focus of the planet to \a focus
     void                    ClickColonize();                    ///< called if colonize button is pressed
     void                    ClickInvade();                      ///< called if invade button is pressed
@@ -479,6 +479,7 @@
     MilitaryPanel*          m_military_panel;           ///< contains icons representing military-related meters
     BuildingsPanel*         m_buildings_panel;          ///< contains icons representing buildings
     SpecialsPanel*          m_specials_panel;           ///< contains icons representing specials
+    StarType                m_starType;
 };
 
 /** Container class that holds PlanetPanels.  Creates and destroys PlanetPanel
@@ -727,7 +728,8 @@
     m_resource_panel(0),
     m_military_panel(0),
     m_buildings_panel(0),
-    m_specials_panel(0)
+    m_specials_panel(0),
+    m_starType(star_type)
 {
     SetName(UserString("PLANET_PANEL"));
 
@@ -739,52 +741,9 @@
         return;
     }
 
+    CheckDisplayPlanets();
 
-    if (GetOptionsDB().Get<bool>("UI.sidepanel-planet-shown")) {
-        if (planet->Type() == PT_ASTEROIDS) {
-            std::vector<boost::shared_ptr<GG::Texture> > textures;
-            GetAsteroidTextures(m_planet_id, textures);
-            GG::X texture_width = textures[0]->DefaultWidth();
-            GG::Y texture_height = textures[0]->DefaultHeight();
-            GG::Pt planet_image_pos(GG::X(MaxPlanetDiameter() / 2 - texture_width / 2 + 3), GG::Y0);
 
-            m_planet_graphic = new GG::DynamicGraphic(planet_image_pos.x, planet_image_pos.y,
-                                                      texture_width, texture_height, true,
-                                                      texture_width, texture_height, 0, textures,
-                                                      GG::GRAPHIC_FITGRAPHIC | GG::GRAPHIC_PROPSCALE);
-            m_planet_graphic->SetFPS(GetAsteroidsFPS());
-            m_planet_graphic->SetFrameIndex(RandSmallInt(0, textures.size() - 1));
-            AttachChild(m_planet_graphic);
-            m_planet_graphic->Play();
-
-        } else if (planet->Type() < NUM_PLANET_TYPES) {
-            int planet_image_sz = PlanetDiameter(planet->Size());
-            GG::Pt planet_image_pos(GG::X(MaxPlanetDiameter() / 2 - planet_image_sz / 2 + 3),
-                                    GG::Y(MaxPlanetDiameter() / 2 - planet_image_sz / 2));
-
-            const std::map<PlanetType, std::vector<RotatingPlanetData> >& planet_data = GetRotatingPlanetData();
-            std::map<PlanetType, std::vector<RotatingPlanetData> >::const_iterator it = planet_data.find(planet->Type());
-            int num_planets_of_type;
-            if (it != planet_data.end() && (num_planets_of_type = planet_data.find(planet->Type())->second.size())) {
-                // using algorithm from Thomas Wang's 32 bit Mix Function; assumes that
-                // only the lower 16 bits of the system and planet ID's are significant
-                unsigned int hash_value =
-                    (static_cast<unsigned int>(m_planet_id) & 0xFFFF) + (static_cast<unsigned int>(m_planet_id) & 0xFFFF);
-                hash_value += ~(hash_value << 15);
-                hash_value ^= hash_value >> 10;
-                hash_value += hash_value << 3;
-                hash_value ^= hash_value >> 6;
-                hash_value += ~(hash_value << 11);
-                hash_value ^= hash_value >> 16;
-                m_rotating_planet_graphic =
-                    new RotatingPlanetControl(planet_image_pos.x, planet_image_pos.y, *planet, star_type,
-                                              it->second[hash_value % num_planets_of_type]);
-                AttachChild(m_rotating_planet_graphic);
-            }
-        }
-    }
-
-
     // create planet name text
 
     // apply formatting tags around planet name to indicate:
@@ -975,6 +934,8 @@
     }
 
     GG::Y min_height(MaxPlanetDiameter());
+
+    CheckDisplayPlanets();
     if (m_planet_graphic)
         min_height = m_planet_graphic->Height();
 
@@ -983,6 +944,53 @@
     ResizedSignal();
 }
 
+void SidePanel::PlanetPanel::CheckDisplayPlanets()
+{
+    const Planet* planet = GetObject<Planet>(m_planet_id);
+    if (GetOptionsDB().Get<bool>("UI.sidepanel-planet-shown")) {
+        if (planet->Type() == PT_ASTEROIDS) {
+            std::vector<boost::shared_ptr<GG::Texture> > textures;
+            GetAsteroidTextures(m_planet_id, textures);
+            GG::X texture_width = textures[0]->DefaultWidth();
+            GG::Y texture_height = textures[0]->DefaultHeight();
+            GG::Pt planet_image_pos(GG::X(MaxPlanetDiameter() / 2 - texture_width / 2 + 3), GG::Y0);
+
+            m_planet_graphic = new GG::DynamicGraphic(planet_image_pos.x, planet_image_pos.y,
+                                                        texture_width, texture_height, true,
+                                                        texture_width, texture_height, 0, textures,
+                                                        GG::GRAPHIC_FITGRAPHIC | GG::GRAPHIC_PROPSCALE);
+            m_planet_graphic->SetFPS(GetAsteroidsFPS());
+            m_planet_graphic->SetFrameIndex(RandSmallInt(0, textures.size() - 1));
+            AttachChild(m_planet_graphic);
+            m_planet_graphic->Play();
+        } else if (planet->Type() < NUM_PLANET_TYPES) {
+            int planet_image_sz = PlanetDiameter(planet->Size());
+            GG::Pt planet_image_pos(GG::X(MaxPlanetDiameter() / 2 - planet_image_sz / 2 + 3),
+                                GG::Y(MaxPlanetDiameter() / 2 - planet_image_sz / 2));
+
+            const std::map<PlanetType, std::vector<RotatingPlanetData> >& planet_data = GetRotatingPlanetData();
+            std::map<PlanetType, std::vector<RotatingPlanetData> >::const_iterator it = planet_data.find(planet->Type());
+            int num_planets_of_type;
+            if (it != planet_data.end() && (num_planets_of_type = planet_data.find(planet->Type())->second.size())) {
+                // using algorithm from Thomas Wang's 32 bit Mix Function; assumes that
+                // only the lower 16 bits of the system and planet ID's are significant
+                unsigned int hash_value =
+                    (static_cast<unsigned int>(m_planet_id) & 0xFFFF) + (static_cast<unsigned int>(m_planet_id) & 0xFFFF);
+                hash_value += ~(hash_value << 15);
+                hash_value ^= hash_value >> 10;
+                hash_value += hash_value << 3;
+                hash_value ^= hash_value >> 6;
+                hash_value += ~(hash_value << 11);
+                hash_value ^= hash_value >> 16;
+                m_rotating_planet_graphic =
+                    new RotatingPlanetControl(planet_image_pos.x, planet_image_pos.y, *planet, m_starType,
+                                            it->second[hash_value % num_planets_of_type]);
+                AttachChild(m_rotating_planet_graphic);
+            }
+        }
+    }
+}
+
 namespace {
     Ship* ValidSelectedColonyShip(int system_id) {
         // if not looking in a valid system, no valid colony ship can be available
